; Some examples of simple list functions

; take left component of a pair (or first element of a list)
(fun #L ((L . R)) L)

; take right component of a pair (or the tail of a list)
(fun #R ((L . R)) R)

; take second element of a list
(fun #2 ((_1 _2 . rest)) _2)

; make a list of all arguments
(fun list l l)

; return the length of a list
(fun length
  (())       0
  ((a . as)) (+ 1 (length as)))

; append two lists
(fun append
   (()       bs) bs
   ((a . as) bs) (:: a (append as bs)))

; reverse a list
(fun reverse
  (as)          (reverse as ())
  (()       bs) bs
  ((a . as) bs) (reverse as (:: a bs)))

; map function
(fun map
  (f ()) ()
  (f (a . as)) (:: (f a) (map f as)))

; equality test
(fun equal 
  (x x) 'T 
  (x y) ()
)

; variadic equality test
(fun Equal
  (x) 'T
  (x x . rest) (apply Equal (:: x rest))
  otherwise ())

; ordered test
(fun orderedBy (op list) (apply op list))

; define the atom function
(fun handler
  (x) (if (equal x (number? x)) (raise 'NotASymbolError) (symbol? x))
)

(fun process 
  (x) (if (symbol? x) x 
          (if (number? x) x 
              (if (equal () x) x
                  (raise 'NotASymbolOrNumber))))
)

(fun ff3 
  (x) (try-with 
        (process x) 
        (\ (NoError) (ff3 (#L x))))
)

(fun divSafe 
  (x) (if (equal x 0) (raise 'DivisionByZero) (/ 1 x))
)

(fun handleDivZero (x)
  (try-with
    (divSafe x)
    (\ (_) 'Infinity))
)

(fun ff3 (x)
  (handle
    (if (symbol? x) x
    (if (symbol? (#L x)) (#L x) (ff (#R x))))
    (raise x)
  )
)

(fun ff4 (x)
  (try-with
    (if (symbol? x) x
    (if (symbol? (#L x)) (#L x) (ff (#R x))))
    (raise x)
  )
)


; function to find the leftmost symbol in an S-expression
(fun ff 
  (x) (if (symbol? x) x (ff (#L x)))
)

(fun ff1 (x)
  (if (number? x) x (if (symbol? x) x (ff (#L x))))
)

(fun ff2 x
  (if
    ((symbol? x) x)
    ((or (number? x) (null? x)) (raise 'NotASymbolError)) 
    (else (ff (#L x)))
  )
) 


; function to find the leftmost symbol in an S-expression
;(fun ff 
;  (x) (if (symbol? x) x (ff (#L x)))
;)

;(fun ff 
;  ((lambda (x) 
;    (if (atom x) x (ff (#L x)))))
;)  

;(fun ff (x)
;  (if (atom x) x (#L x))
;)

