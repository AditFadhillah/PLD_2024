# Lambda Calculus

Great

# PLD LISP

a):
  Great, you could mention what happens if we apply it on something that has a number or nil.

b):
please include all of the files needed to run your code. 
  It is also a good idea to show the exact syntax you decided on, so how to use it.
  Did you try and run the code, cause you have a problem with the pattern match in the eval function, as it will pattern match as function application instead of your raise and handle, otherwise the code looks good.
  You should consider what happens if we raise an error that is never chaught, what will your solution give, and discuss this design choice.
  Great discussion of your design choices otherwise.

c):
  Your code and idea is not really what you should implement, the idea behind the problem is that you make it so ff still finds the leftmost symbol, but now it might encounter some numbers and nils before finding the leftmost symbol, in other words the leftmost symbol might not be the leftmost atom. i.e. in "(2 3 z 4)" it should give z and in "((2.x).(y.3))" it should give x.
  Also you were asked to show the output of your function applied to some arguments, make sure to include this.

# Bratman diagrams

a):
  Great 

b):
  Great

# Syntax

a):
  That is a correct fix, but note that in Haskell we can also use brackets, so please explain how the rules allow for both, and therefore more specificly what the rules are.
b):
  Im not sure what you mean with your explanation of the indentation rules in FORTRAN, but it might be correct, perhaps try and formulate it using columns.
  Remember to compare the 2 rationals for the rules.
c):
  for readability I do agree, but you should discuss it more, are there no drawbacks? What about writeability? Could you not just use indentation to make it readable even if there are no explicit rules for it?
  For implementation it seems like your argument states that it is always easier to parse with layout rules, but is that true, is Python an easy language to parse with a context free grammar?